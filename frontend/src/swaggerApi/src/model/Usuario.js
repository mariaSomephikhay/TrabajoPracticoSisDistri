/**
 * Api Documentada
 * Documentaci√≥n de la API de ejemplo con Flask + gRPC
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Rol from './Rol';

/**
 * The Usuario model module.
 * @module model/Usuario
 * @version 1.0
 */
class Usuario {
    /**
     * Constructs a new <code>Usuario</code>.
     * @alias module:model/Usuario
     * @param activo {Boolean} 
     * @param apellido {String} 
     * @param email {String} 
     * @param nombre {String} 
     * @param rol {module:model/Rol} 
     * @param username {String} 
     */
    constructor(activo, apellido, email, nombre, rol, username) { 
        
        Usuario.initialize(this, activo, apellido, email, nombre, rol, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activo, apellido, email, nombre, rol, username) { 
        obj['activo'] = activo;
        obj['apellido'] = apellido;
        obj['email'] = email;
        obj['nombre'] = nombre;
        obj['rol'] = rol;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>Usuario</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Usuario} obj Optional instance to populate.
     * @return {module:model/Usuario} The populated <code>Usuario</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Usuario();

            if (data.hasOwnProperty('activo')) {
                obj['activo'] = ApiClient.convertToType(data['activo'], 'Boolean');
            }
            if (data.hasOwnProperty('apellido')) {
                obj['apellido'] = ApiClient.convertToType(data['apellido'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('nombre')) {
                obj['nombre'] = ApiClient.convertToType(data['nombre'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('rol')) {
                obj['rol'] = Rol.constructFromObject(data['rol']);
            }
            if (data.hasOwnProperty('telefono')) {
                obj['telefono'] = ApiClient.convertToType(data['telefono'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Usuario</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Usuario</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Usuario.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apellido'] && !(typeof data['apellido'] === 'string' || data['apellido'] instanceof String)) {
            throw new Error("Expected the field `apellido` to be a primitive type in the JSON string but got " + data['apellido']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['nombre'] && !(typeof data['nombre'] === 'string' || data['nombre'] instanceof String)) {
            throw new Error("Expected the field `nombre` to be a primitive type in the JSON string but got " + data['nombre']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `rol`
        if (data['rol']) { // data not null
          Rol.validateJSON(data['rol']);
        }
        // ensure the json data is a string
        if (data['telefono'] && !(typeof data['telefono'] === 'string' || data['telefono'] instanceof String)) {
            throw new Error("Expected the field `telefono` to be a primitive type in the JSON string but got " + data['telefono']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}

Usuario.RequiredProperties = ["activo", "apellido", "email", "nombre", "rol", "username"];

/**
 * @member {Boolean} activo
 */
Usuario.prototype['activo'] = undefined;

/**
 * @member {String} apellido
 */
Usuario.prototype['apellido'] = undefined;

/**
 * @member {String} email
 */
Usuario.prototype['email'] = undefined;

/**
 * @member {String} id
 */
Usuario.prototype['id'] = undefined;

/**
 * @member {String} nombre
 */
Usuario.prototype['nombre'] = undefined;

/**
 * @member {String} password
 */
Usuario.prototype['password'] = undefined;

/**
 * @member {module:model/Rol} rol
 */
Usuario.prototype['rol'] = undefined;

/**
 * @member {String} telefono
 */
Usuario.prototype['telefono'] = undefined;

/**
 * @member {String} username
 */
Usuario.prototype['username'] = undefined;






export default Usuario;

