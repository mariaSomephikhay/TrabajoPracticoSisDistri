/**
 * Api Documentada
 * Documentaci√≥n de la API de ejemplo con Flask + gRPC
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Transferencia from '../model/Transferencia';

/**
* Transferencias service.
* @module api/TransferenciasApi
* @version 1.0
*/
export default class TransferenciasApi {

    /**
    * Constructs a new TransferenciasApi. 
    * @alias module:api/TransferenciasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the newTransfer operation.
     * @callback module:api/TransferenciasApi~newTransferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enviar transferencia de donaciones a organizacion
     * @param {Number} idSolicitante 
     * @param {module:model/Transferencia} payload 
     * @param {module:api/TransferenciasApi~newTransferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    newTransfer(idSolicitante, payload, callback) {
      let postBody = payload;
      // verify the required parameter 'idSolicitante' is set
      if (idSolicitante === undefined || idSolicitante === null) {
        throw new Error("Missing the required parameter 'idSolicitante' when calling newTransfer");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling newTransfer");
      }

      let pathParams = {
        'id_solicitante': idSolicitante
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/transferencia/donacion/{id_solicitante}/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
