/**
 * Api Documentada
 * Documentaci√≥n de la API de ejemplo con Flask + gRPC
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Donacion from '../model/Donacion';
import DonacionList from '../model/DonacionList';
import Error from '../model/Error';

/**
* Donaciones service.
* @module api/DonacionesApi
* @version 1.0
*/
export default class DonacionesApi {

    /**
    * Constructs a new DonacionesApi. 
    * @alias module:api/DonacionesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DonacionesApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Donacion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar donacion
     * @param {Number} id 
     * @param {module:api/DonacionesApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Donacion}
     */
    deleteUser(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Donacion;
      return this.apiClient.callApi(
        '/donacion/delete/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDonacion operation.
     * @callback module:api/DonacionesApi~getDonacionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Donacion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener Donacion
     * @param {Number} id 
     * @param {module:api/DonacionesApi~getDonacionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Donacion}
     */
    getDonacion(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDonacion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Donacion;
      return this.apiClient.callApi(
        '/donacion/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDonacionList operation.
     * @callback module:api/DonacionesApi~getDonacionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DonacionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todos las donaciones
     * @param {module:api/DonacionesApi~getDonacionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DonacionList}
     */
    getDonacionList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DonacionList;
      return this.apiClient.callApi(
        '/donacion/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDonacionInsert operation.
     * @callback module:api/DonacionesApi~postDonacionInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Donacion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insertar una nueva donacion
     * @param {module:model/Donacion} payload 
     * @param {module:api/DonacionesApi~postDonacionInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Donacion}
     */
    postDonacionInsert(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postDonacionInsert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Donacion;
      return this.apiClient.callApi(
        '/donacion/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDonacion operation.
     * @callback module:api/DonacionesApi~putDonacionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Donacion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar un donacion
     * @param {Number} id 
     * @param {module:model/Donacion} payload 
     * @param {module:api/DonacionesApi~putDonacionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Donacion}
     */
    putDonacion(id, payload, callback) {
      let postBody = payload;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putDonacion");
      }
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling putDonacion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Donacion;
      return this.apiClient.callApi(
        '/donacion/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
