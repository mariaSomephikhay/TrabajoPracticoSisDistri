/**
 * Api Documentada
 * Documentaci√≥n de la API de ejemplo con Flask + gRPC
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Solicitud from '../model/Solicitud';
import SolicitudBaja from '../model/SolicitudBaja';
import SolicitudError from '../model/SolicitudError';
import SolicitudGetList from '../model/SolicitudGetList';
import SolicitudGraphQLResponse from '../model/SolicitudGraphQLResponse';
import SolicitudQueryInformeSolicitud from '../model/SolicitudQueryInformeSolicitud';

/**
* Solicitudes service.
* @module api/SolicitudesApi
* @version 1.0
*/
export default class SolicitudesApi {

    /**
    * Constructs a new SolicitudesApi. 
    * @alias module:api/SolicitudesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteRequestDonacion operation.
     * @callback module:api/SolicitudesApi~deleteRequestDonacionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SolicitudBaja} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enviar solicitud de donaciones a kafka
     * @param {module:model/SolicitudBaja} payload 
     * @param {module:api/SolicitudesApi~deleteRequestDonacionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SolicitudBaja}
     */
    deleteRequestDonacion(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling deleteRequestDonacion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SolicitudBaja;
      return this.apiClient.callApi(
        '/solicitud/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllRequestDonacion operation.
     * @callback module:api/SolicitudesApi~getAllRequestDonacionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SolicitudGetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todos las solicitudes donaciones
     * @param {module:api/SolicitudesApi~getAllRequestDonacionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SolicitudGetList}
     */
    getAllRequestDonacion(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SolicitudGetList;
      return this.apiClient.callApi(
        '/solicitud/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the informeSolicitudesDonaciones operation.
     * @callback module:api/SolicitudesApi~informeSolicitudesDonacionesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SolicitudGraphQLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consulta de informe de solicitudes con filtros
     * @param {module:model/SolicitudQueryInformeSolicitud} payload 
     * @param {module:api/SolicitudesApi~informeSolicitudesDonacionesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SolicitudGraphQLResponse}
     */
    informeSolicitudesDonaciones(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling informeSolicitudesDonaciones");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SolicitudGraphQLResponse;
      return this.apiClient.callApi(
        '/solicitud/informe/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newRequestDonacion operation.
     * @callback module:api/SolicitudesApi~newRequestDonacionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Solicitud} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enviar solicitud de donaciones a kafka
     * @param {module:model/Solicitud} payload 
     * @param {module:api/SolicitudesApi~newRequestDonacionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Solicitud}
     */
    newRequestDonacion(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling newRequestDonacion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Solicitud;
      return this.apiClient.callApi(
        '/solicitud/request/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
