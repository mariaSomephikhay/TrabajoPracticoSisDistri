/**
 * Api Documentada
 * Documentaci√≥n de la API de ejemplo con Flask + gRPC
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BorrarQueryGraphql from '../model/BorrarQueryGraphql';
import Error from '../model/Error';
import FiltroDto from '../model/FiltroDto';
import FiltrosGraphQLResponse from '../model/FiltrosGraphQLResponse';
import ListaFiltrosDto from '../model/ListaFiltrosDto';
import SubirQueryGraphql from '../model/SubirQueryGraphql';
import TraerQueryGraphql from '../model/TraerQueryGraphql';

/**
* Filtros service.
* @module api/FiltrosApi
* @version 1.0
*/
export default class FiltrosApi {

    /**
    * Constructs a new FiltrosApi. 
    * @alias module:api/FiltrosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the borrarFiltrosGraphQL operation.
     * @callback module:api/FiltrosApi~borrarFiltrosGraphQLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltrosGraphQLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * borra filtros con graphql
     * @param {module:model/BorrarQueryGraphql} payload 
     * @param {module:api/FiltrosApi~borrarFiltrosGraphQLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltrosGraphQLResponse}
     */
    borrarFiltrosGraphQL(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling borrarFiltrosGraphQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FiltrosGraphQLResponse;
      return this.apiClient.callApi(
        '/filter/borrar/graphql/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFilter operation.
     * @callback module:api/FiltrosApi~createFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltroDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insertar un nuevo filtro
     * @param {module:model/FiltroDto} payload 
     * @param {module:api/FiltrosApi~createFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltroDto}
     */
    createFilter(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FiltroDto;
      return this.apiClient.callApi(
        '/filter/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFilter operation.
     * @callback module:api/FiltrosApi~deleteFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar filtro por id
     * @param {Number} id 
     * @param {module:api/FiltrosApi~deleteFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFilter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/filter/delete/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilter operation.
     * @callback module:api/FiltrosApi~getFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListaFiltrosDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * traer filtro por usuario y tipo
     * @param {String} type 
     * @param {String} idUsuario 
     * @param {module:api/FiltrosApi~getFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListaFiltrosDto}
     */
    getFilter(type, idUsuario, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getFilter");
      }
      // verify the required parameter 'idUsuario' is set
      if (idUsuario === undefined || idUsuario === null) {
        throw new Error("Missing the required parameter 'idUsuario' when calling getFilter");
      }

      let pathParams = {
        'type': type,
        'idUsuario': idUsuario
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListaFiltrosDto;
      return this.apiClient.callApi(
        '/filter/{type}/{idUsuario}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subirQueryGraphqlDto operation.
     * @callback module:api/FiltrosApi~subirQueryGraphqlDtoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltrosGraphQLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * guarda filtros con graphql
     * @param {module:model/SubirQueryGraphql} payload 
     * @param {module:api/FiltrosApi~subirQueryGraphqlDtoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltrosGraphQLResponse}
     */
    subirQueryGraphqlDto(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling subirQueryGraphqlDto");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FiltrosGraphQLResponse;
      return this.apiClient.callApi(
        '/filter/guardar/graphql/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the traerFiltrosGraphQL operation.
     * @callback module:api/FiltrosApi~traerFiltrosGraphQLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FiltrosGraphQLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * trae filtros con graphql
     * @param {module:model/TraerQueryGraphql} payload 
     * @param {module:api/FiltrosApi~traerFiltrosGraphQLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FiltrosGraphQLResponse}
     */
    traerFiltrosGraphQL(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling traerFiltrosGraphQL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FiltrosGraphQLResponse;
      return this.apiClient.callApi(
        '/filter/traer/graphql/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
