# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import donaciones_eventos_pb2 as donaciones__eventos__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in donaciones_eventos_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ManagerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getUserByUsername = channel.unary_unary(
                '/managerservice.ManagerService/getUserByUsername',
                request_serializer=donaciones__eventos__pb2.UserUsername.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Usuario.FromString,
                _registered_method=True)
        self.getUserById = channel.unary_unary(
                '/managerservice.ManagerService/getUserById',
                request_serializer=donaciones__eventos__pb2.UserId.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Usuario.FromString,
                _registered_method=True)
        self.getAllUsers = channel.unary_unary(
                '/managerservice.ManagerService/getAllUsers',
                request_serializer=donaciones__eventos__pb2.Empty.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.UsuarioList.FromString,
                _registered_method=True)
        self.insertOrUpdateUser = channel.unary_unary(
                '/managerservice.ManagerService/insertOrUpdateUser',
                request_serializer=donaciones__eventos__pb2.Usuario.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Usuario.FromString,
                _registered_method=True)
        self.deleteUser = channel.unary_unary(
                '/managerservice.ManagerService/deleteUser',
                request_serializer=donaciones__eventos__pb2.UserId.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Usuario.FromString,
                _registered_method=True)
        self.insertOrUpdateDonacion = channel.unary_unary(
                '/managerservice.ManagerService/insertOrUpdateDonacion',
                request_serializer=donaciones__eventos__pb2.Donacion.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Donacion.FromString,
                _registered_method=True)
        self.getDonacionById = channel.unary_unary(
                '/managerservice.ManagerService/getDonacionById',
                request_serializer=donaciones__eventos__pb2.DonacionId.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Donacion.FromString,
                _registered_method=True)
        self.getAllDonaciones = channel.unary_unary(
                '/managerservice.ManagerService/getAllDonaciones',
                request_serializer=donaciones__eventos__pb2.Empty.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.DonacionList.FromString,
                _registered_method=True)
        self.deleteDonacion = channel.unary_unary(
                '/managerservice.ManagerService/deleteDonacion',
                request_serializer=donaciones__eventos__pb2.DonacionIdUsu.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Donacion.FromString,
                _registered_method=True)
        self.insertOrUpdateEvento = channel.unary_unary(
                '/managerservice.ManagerService/insertOrUpdateEvento',
                request_serializer=donaciones__eventos__pb2.Evento.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Evento.FromString,
                _registered_method=True)
        self.deleteEventos = channel.unary_unary(
                '/managerservice.ManagerService/deleteEventos',
                request_serializer=donaciones__eventos__pb2.EventoId.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Evento.FromString,
                _registered_method=True)
        self.getEventoById = channel.unary_unary(
                '/managerservice.ManagerService/getEventoById',
                request_serializer=donaciones__eventos__pb2.EventoId.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.Evento.FromString,
                _registered_method=True)
        self.getAllEventos = channel.unary_unary(
                '/managerservice.ManagerService/getAllEventos',
                request_serializer=donaciones__eventos__pb2.Empty.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.EventoList.FromString,
                _registered_method=True)
        self.insertUsersToEvento = channel.unary_unary(
                '/managerservice.ManagerService/insertUsersToEvento',
                request_serializer=donaciones__eventos__pb2.EventoWithListUsers.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.EventoWithListUsersDetails.FromString,
                _registered_method=True)
        self.insertDonacionesToEvento = channel.unary_unary(
                '/managerservice.ManagerService/insertDonacionesToEvento',
                request_serializer=donaciones__eventos__pb2.EventoWithListDonaciones.SerializeToString,
                response_deserializer=donaciones__eventos__pb2.EventoWithListDonacionesDetails.FromString,
                _registered_method=True)


class ManagerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getUserByUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUserById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertOrUpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertOrUpdateDonacion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDonacionById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllDonaciones(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteDonacion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertOrUpdateEvento(self, request, context):
        """------------EVENTO-----------//
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteEventos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEventoById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllEventos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertUsersToEvento(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertDonacionesToEvento(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getUserByUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.getUserByUsername,
                    request_deserializer=donaciones__eventos__pb2.UserUsername.FromString,
                    response_serializer=donaciones__eventos__pb2.Usuario.SerializeToString,
            ),
            'getUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.getUserById,
                    request_deserializer=donaciones__eventos__pb2.UserId.FromString,
                    response_serializer=donaciones__eventos__pb2.Usuario.SerializeToString,
            ),
            'getAllUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllUsers,
                    request_deserializer=donaciones__eventos__pb2.Empty.FromString,
                    response_serializer=donaciones__eventos__pb2.UsuarioList.SerializeToString,
            ),
            'insertOrUpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.insertOrUpdateUser,
                    request_deserializer=donaciones__eventos__pb2.Usuario.FromString,
                    response_serializer=donaciones__eventos__pb2.Usuario.SerializeToString,
            ),
            'deleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteUser,
                    request_deserializer=donaciones__eventos__pb2.UserId.FromString,
                    response_serializer=donaciones__eventos__pb2.Usuario.SerializeToString,
            ),
            'insertOrUpdateDonacion': grpc.unary_unary_rpc_method_handler(
                    servicer.insertOrUpdateDonacion,
                    request_deserializer=donaciones__eventos__pb2.Donacion.FromString,
                    response_serializer=donaciones__eventos__pb2.Donacion.SerializeToString,
            ),
            'getDonacionById': grpc.unary_unary_rpc_method_handler(
                    servicer.getDonacionById,
                    request_deserializer=donaciones__eventos__pb2.DonacionId.FromString,
                    response_serializer=donaciones__eventos__pb2.Donacion.SerializeToString,
            ),
            'getAllDonaciones': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllDonaciones,
                    request_deserializer=donaciones__eventos__pb2.Empty.FromString,
                    response_serializer=donaciones__eventos__pb2.DonacionList.SerializeToString,
            ),
            'deleteDonacion': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteDonacion,
                    request_deserializer=donaciones__eventos__pb2.DonacionIdUsu.FromString,
                    response_serializer=donaciones__eventos__pb2.Donacion.SerializeToString,
            ),
            'insertOrUpdateEvento': grpc.unary_unary_rpc_method_handler(
                    servicer.insertOrUpdateEvento,
                    request_deserializer=donaciones__eventos__pb2.Evento.FromString,
                    response_serializer=donaciones__eventos__pb2.Evento.SerializeToString,
            ),
            'deleteEventos': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteEventos,
                    request_deserializer=donaciones__eventos__pb2.EventoId.FromString,
                    response_serializer=donaciones__eventos__pb2.Evento.SerializeToString,
            ),
            'getEventoById': grpc.unary_unary_rpc_method_handler(
                    servicer.getEventoById,
                    request_deserializer=donaciones__eventos__pb2.EventoId.FromString,
                    response_serializer=donaciones__eventos__pb2.Evento.SerializeToString,
            ),
            'getAllEventos': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllEventos,
                    request_deserializer=donaciones__eventos__pb2.Empty.FromString,
                    response_serializer=donaciones__eventos__pb2.EventoList.SerializeToString,
            ),
            'insertUsersToEvento': grpc.unary_unary_rpc_method_handler(
                    servicer.insertUsersToEvento,
                    request_deserializer=donaciones__eventos__pb2.EventoWithListUsers.FromString,
                    response_serializer=donaciones__eventos__pb2.EventoWithListUsersDetails.SerializeToString,
            ),
            'insertDonacionesToEvento': grpc.unary_unary_rpc_method_handler(
                    servicer.insertDonacionesToEvento,
                    request_deserializer=donaciones__eventos__pb2.EventoWithListDonaciones.FromString,
                    response_serializer=donaciones__eventos__pb2.EventoWithListDonacionesDetails.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'managerservice.ManagerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('managerservice.ManagerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ManagerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getUserByUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/getUserByUsername',
            donaciones__eventos__pb2.UserUsername.SerializeToString,
            donaciones__eventos__pb2.Usuario.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/getUserById',
            donaciones__eventos__pb2.UserId.SerializeToString,
            donaciones__eventos__pb2.Usuario.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/getAllUsers',
            donaciones__eventos__pb2.Empty.SerializeToString,
            donaciones__eventos__pb2.UsuarioList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def insertOrUpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/insertOrUpdateUser',
            donaciones__eventos__pb2.Usuario.SerializeToString,
            donaciones__eventos__pb2.Usuario.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/deleteUser',
            donaciones__eventos__pb2.UserId.SerializeToString,
            donaciones__eventos__pb2.Usuario.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def insertOrUpdateDonacion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/insertOrUpdateDonacion',
            donaciones__eventos__pb2.Donacion.SerializeToString,
            donaciones__eventos__pb2.Donacion.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDonacionById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/getDonacionById',
            donaciones__eventos__pb2.DonacionId.SerializeToString,
            donaciones__eventos__pb2.Donacion.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAllDonaciones(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/getAllDonaciones',
            donaciones__eventos__pb2.Empty.SerializeToString,
            donaciones__eventos__pb2.DonacionList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteDonacion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/deleteDonacion',
            donaciones__eventos__pb2.DonacionIdUsu.SerializeToString,
            donaciones__eventos__pb2.Donacion.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def insertOrUpdateEvento(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/insertOrUpdateEvento',
            donaciones__eventos__pb2.Evento.SerializeToString,
            donaciones__eventos__pb2.Evento.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteEventos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/deleteEventos',
            donaciones__eventos__pb2.EventoId.SerializeToString,
            donaciones__eventos__pb2.Evento.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getEventoById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/getEventoById',
            donaciones__eventos__pb2.EventoId.SerializeToString,
            donaciones__eventos__pb2.Evento.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAllEventos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/getAllEventos',
            donaciones__eventos__pb2.Empty.SerializeToString,
            donaciones__eventos__pb2.EventoList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def insertUsersToEvento(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/insertUsersToEvento',
            donaciones__eventos__pb2.EventoWithListUsers.SerializeToString,
            donaciones__eventos__pb2.EventoWithListUsersDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def insertDonacionesToEvento(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/managerservice.ManagerService/insertDonacionesToEvento',
            donaciones__eventos__pb2.EventoWithListDonaciones.SerializeToString,
            donaciones__eventos__pb2.EventoWithListDonacionesDetails.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
