syntax = "proto3";

package managerservice;

import "google/protobuf/timestamp.proto";

//PARA CUANDO ES NULO
message Empty{}

message UserUsername {
    string username = 1;
}

message UserId {
    string id = 1;
}

message Usuario {
    string id = 1;
    string username = 2;
    string password = 3;
    string email = 4;
    string nombre = 5;
    string apellido = 6;
    string telefono = 7;
    bool activo = 8;
    Rol rol = 9;
}

message Rol {
    int32 id = 1;
    string descripcion = 2;
}

message UsuarioList {
    repeated Usuario usuarios = 1;
}

message DonacionId {
    int32 id = 1;
}

message DonacionIdUsu {
    int32 id = 1;
    Usuario usuario = 2;
}


message Donacion {
    int32 id = 1;
    Categoria categoria = 2;
    string descripcion = 3;
    int32 cantidad = 4;
    bool eliminado = 5;
    Usuario usuario = 6;
}

message DonacionList {
    repeated Donacion donaciones = 1;
}
	
message Categoria {
    int32 id = 1;
    string descripcion = 2;
}

message DonacionesAsociadas {
    Donacion donacion = 1;
    int32 cantidad = 2;
}
//------------Voluntario-----------//
message Voluntario {
    string id = 1;
    string email = 2;
    string nombre = 3;
    string apellido = 4;
    string telefono = 5;
    Organizacion organizacion = 6;
}

//------------EVENTO-----------//

message Evento {
    string id = 1;
    string nombre = 2;
    string descripcion = 3;
    google.protobuf.Timestamp fecha = 4;
    Usuario usuario = 6;
    int32 idOrganizacion = 7;
    bool activo = 8;
    bool publicado = 9;
}

message EventoId {
    string id = 1;
}

message EventoList {
    repeated Evento eventos = 1;
}

message EventoWithListUsers {
	string id = 1;
    repeated UserId usersIds = 2;
}

message EventoWithListUsersDetails {
	Evento evento = 1;
    repeated Usuario users = 2;
    repeated Voluntario voluntarios = 3;
}

message EventoWithListDonaciones {
	string idEvento = 1;
    int32 donacionId = 2;
    int32 cantidad = 3;
    Usuario usuario = 4;
}

message EventoWithListDonacionesDetails {
	Evento id = 1;
    Donacion donacion = 2;
    int32 cantidad = 3;
}

message EventoWithAllListDonacionesDetails {
	Evento id = 1;
    repeated DonacionesAsociadas listaDonacion = 2;
}

//------------SOLICITUDES-----------//

message Organizacion {
    int32 id = 1;
    string nombre = 2;
    bool externa = 3;
}

message OrganizacionId {
    int32 id = 1;
}

message SolicitudDonacion {
    string id = 1;
    Organizacion organizacionSolicitante= 2;
    bool activa = 3;
    bool procesada = 4;
    repeated Donacion donaciones = 5;
}

message ListSolicitudDonacion {
    repeated SolicitudDonacion solicitudes = 1;
}

message Oferta {
    int32 id = 1;
    Organizacion organizacionDonante= 2;
    repeated Donacion donaciones = 3;
}

message ListOferta {
    repeated Oferta ofertas = 1;
}



service ManagerService{
  rpc getUserByUsername (UserUsername) returns (Usuario) {};
  rpc getUserById (UserId) returns (Usuario) {};
  rpc getAllUsers (Empty) returns (UsuarioList) {};
  rpc insertOrUpdateUser (Usuario) returns (Usuario) {};
  rpc deleteUser (UserId) returns (Usuario) {};
  rpc insertOrUpdateDonacion (Donacion) returns (Donacion) {};
  rpc getDonacionById (DonacionId) returns (Donacion) {};
  rpc getAllDonaciones (Empty) returns (DonacionList) {};  
  rpc getAllDonacionesWithoutOffersByOrganization (OrganizacionId) returns (DonacionList) {};
  rpc deleteDonacion (DonacionIdUsu) returns (Donacion) {};

  //------------EVENTO-----------//
  rpc insertOrUpdateEvento (Evento) returns (Evento) {};
  rpc deleteEventos(EventoId) returns (Evento) {}; //se agrega "s" porque el gen da error con el nombre "deleteEvento"
  rpc getEventoById (EventoId) returns (Evento) {};
  rpc getAllEventos (Empty) returns (EventoList) {};  
  rpc insertUsersToEvento (EventoWithListUsers) returns (EventoWithListUsersDetails) {};
  rpc insertDonacionesToEvento (EventoWithListDonaciones) returns (EventoWithListDonacionesDetails) {};
  rpc getEventoWithUsersById (EventoId) returns (EventoWithListUsersDetails) {};
  rpc getEventoWithDonacionesById (EventoId) returns (EventoWithAllListDonacionesDetails) {};
  
  //------------SOLICITUDES-----------//
  rpc getAllSolicitudDonaciones (Empty) returns (ListSolicitudDonacion) {};  
  rpc getAllOffersByOrganization (OrganizacionId) returns (ListOferta) {};  
  rpc getLastOffer (Empty) returns (Oferta) {};  

  //AGREGAR ACA TODOS LOS SERVICIOS
}