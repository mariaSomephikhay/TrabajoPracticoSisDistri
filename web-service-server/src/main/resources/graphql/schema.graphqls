type SolicitudDonacion {
	
	id: ID!
	organizacionSolicitante: Organizacion
	activa: Boolean!
	procesada: Boolean!
	donaciones: [Donacion]
	fechaAlta: String
}

type Organizacion {
	
	id: ID!
	nombre: String!
}

type OrganizacionResponse {
  status: String!
  message: String
  data: Organizacion
}


type Donacion {
	id: ID!
	categoria: TipoCategoria
	descripcion: String
	cantidad: Int
}


type Evento {
  id: ID
  nombre: String
  fecha: String
  descripcion: String
  eventoDonaciones : [EventoDonacion]
}

type EventoDonacion {
  cantRepartida: Int
  donacion : Donacion
}

type InformeEvento {
  mes: String
  eventos: [Evento]
}


type InformeSolicitud {
  categoria: TipoCategoria
  eliminado: String
  cantidad: Int
  recibida: Boolean
}

enum TipoCategoria {
  ALIMENTO
  JUGUETE
  ROPA
  UTIL_ESCOLAR
}

input FiltroSolicitudInput {
  categoria: TipoCategoria
  fechaDesde: String
  fechaHasta: String
  eliminado: String
}

type InformeSolicitudResponse {
  status: String!
  message: String
  data: [InformeSolicitud]
}

input FilterInput {
	name: String!
	valueFilter: String!
	usuario: String!
	filterType: String!
}

type Filter {
	id: ID
	name: String
	valueFilter: String
	usuario: String
	filterType: String
}

type FiltroResponse {
  status: String!
  message: String
  data: Filter
}

type FiltrosResponse {
  status: String!
  message: String
  data: [Filter]
}

type Query {
	informeSolicitudes(filtro: FiltroSolicitudInput): InformeSolicitudResponse
	informeParticipacionEventos(usuarioId: ID!, fechaDesde: String, fechaHasta: String,tieneDonacion: String): [InformeEvento]
	traerFiltros(tipo: String!, usuario: String!): FiltrosResponse
}


type Mutation {
	guardarFiltro(filtro: FilterInput!): FiltroResponse
	borrarFiltro(id: ID!): FiltroResponse
}